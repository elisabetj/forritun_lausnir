#!/usr/bin/env bash
PPATH=$(realpath ..)
USE_SYMLINKS=0
. ../../../../testdata_tools/gen.sh

use_solution solution_code.py

compile filename_generator.py

hint () {
    local name="$1"
    local path="$CURGROUP_DIR/$(_base ${cases[$name]})"
    echo "$2" > "$path.hint"
}

samplegroup
sample 01
sample 02


# Generate files with random data, only one competitor
for i in {01..05}; do
python3 random_file_data_generator.py "test" $i "1" "0"
done;

# Generate files with random data, many competitors, one throw for each
for i in {06..10}; do
python3 random_file_data_generator.py "test" $i "20" "0"
done;

# Generate files with random data, many competitors, possibly many throws for each
for i in {11..15}; do
python3 random_file_data_generator.py "test" $i "20" "1"
done;

# Generate special case for which average throw is equal
python3 file_data_generator_same_average.py "test" "16" 

group GA-given-example 18
tc 01
tc 02

GBHINT="$(printf "Only one line in the file.\n")"
group GB-one-thrower 9
for i in {1..5}; do
    tc one-thrower-$i filename_generator "test" $i
    hint one-thrower-$i "$GBHINT"
done

GCHINT="$(printf "Multiple competitors, only one throw for each.\n")"
group GC-many-throwers-one-throw 18
for i in {6..10}; do
    tc many-throwers-one-throw-$i filename_generator "test" $i
    hint many-throwers-one-throw-$i "$GCHINT"
done

GDHINT="$(printf "Multiple competitors, possibly multiple throws for some or all of them.\n")"
group GD-many-throwers-many-throws 18
for i in {11..15}; do
    tc many-throwers-many-throws-$i filename_generator "test" $i
    hint many-throwers-many-throws-$i "$GDHINT"
done

GEHINT="$(printf "Multiple competitors, equal average.\nTake a look at what the problem statement says should happen\nwhen two or more competitors, with more than one throw each,\nhave the exact same average.\n")"
group GE-many-throwers-eq-average 18
for i in {16..16}; do
    tc many-throwers-eq-average-$i filename_generator "test" $i
    hint many-throwers-eq-average-$i "$GEHINT"
done

GFHINT="$(printf "File not found.\nWhat does your program do when given an invalid file name?\n")"
group GF-file-not-found 9
for i in {17..17}; do
    tc file-not-found-$i filename_generator "test" $i
    hint file-not-found-$i "$GFHINT"
done

GGHINT="$(printf "Space change and case sensitive validation, output must be exactly correct\n")"
group GG-strict-validation 10
output_validator_flags space_change_sensitive case_sensitive
include_group GA-given-example
include_group GB-one-thrower
include_group GC-many-throwers-one-throw
include_group GD-many-throwers-many-throws
include_group GE-many-throwers-eq-average
include_group GF-file-not-found
